'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _downshift = require('downshift');

var _downshift2 = _interopRequireDefault(_downshift);

var _emotionTheming = require('emotion-theming');

var _hoistNonReactStatics = require('hoist-non-react-statics');

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

var _actions = require('@appbaseio/reactivecore/lib/actions');

var _helper = require('@appbaseio/reactivecore/lib/utils/helper');

var _constants = require('@appbaseio/reactivecore/lib/utils/constants');

var _types = require('@appbaseio/reactivecore/lib/utils/types');

var _types2 = _interopRequireDefault(_types);

var _causes = require('@appbaseio/reactivecore/lib/utils/causes');

var _causes2 = _interopRequireDefault(_causes);

var _Title = require('../../styles/Title');

var _Title2 = _interopRequireDefault(_Title);

var _Input = require('../../styles/Input');

var _Input2 = _interopRequireDefault(_Input);

var _CancelSvg = require('../shared/CancelSvg');

var _CancelSvg2 = _interopRequireDefault(_CancelSvg);

var _SearchSvg = require('../shared/SearchSvg');

var _SearchSvg2 = _interopRequireDefault(_SearchSvg);

var _InputIcon = require('../../styles/InputIcon');

var _InputIcon2 = _interopRequireDefault(_InputIcon);

var _Container = require('../../styles/Container');

var _Container2 = _interopRequireDefault(_Container);

var _Mic = require('./addons/Mic');

var _Mic2 = _interopRequireDefault(_Mic);

var _utils = require('../../utils');

var _SuggestionItem = require('./addons/SuggestionItem');

var _SuggestionItem2 = _interopRequireDefault(_SuggestionItem);

var _SuggestionWrapper = require('./addons/SuggestionWrapper');

var _SuggestionWrapper2 = _interopRequireDefault(_SuggestionWrapper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Text = (0, _emotionTheming.withTheme)(function (props) {
	return _react2.default.createElement(
		'span',
		{
			className: 'trim',
			style: {
				color: props.primary ? props.theme.colors.primaryColor : props.theme.colors.textColor
			}
		},
		props.children
	);
});

var CategorySearch = function (_Component) {
	_inherits(CategorySearch, _Component);

	function CategorySearch(props) {
		_classCallCheck(this, CategorySearch);

		var _this = _possibleConstructorReturn(this, _Component.call(this, props));

		_initialiseProps.call(_this);

		var value = props.value || props.defaultValue || {};
		// eslint-disable-next-line
		var _value$term = value.term,
		    currentValue = _value$term === undefined ? '' : _value$term,
		    _value$category = value.category,
		    currentCategory = _value$category === undefined ? null : _value$category;
		// add preference to selected-X value from URL/SSR

		currentValue = props.selectedValue || currentValue;
		currentCategory = props.selectedCategory || currentCategory;

		_this.state = {
			currentValue: currentValue,
			currentCategory: currentCategory,
			suggestions: [],
			isOpen: false
		};
		/**
   * To regulate the query execution based on the input handler,
   * the component query will only get executed when it sets to `true`.
   * */
		_this.isPending = false;

		_this.internalComponent = props.componentId + '__internal';
		_this.queryOptions = {
			size: props.size
		};
		props.addComponent(props.componentId);
		props.addComponent(_this.internalComponent);
		props.setComponentProps(props.componentId, _extends({}, props, {
			componentType: _constants.componentTypes.categorySearch
		}));
		props.setQueryListener(props.componentId, props.onQueryChange, props.onError);

		if (props.highlight) {
			var queryOptions = CategorySearch.highlightQuery(props) || {};
			queryOptions.size = props.size;
			_this.queryOptions = queryOptions;
			props.setQueryOptions(props.componentId, queryOptions);
		} else {
			props.setQueryOptions(props.componentId, _this.queryOptions);
		}

		_this.setReact(props);
		var aggsQuery = _this.getCombinedAggsQuery();
		props.setQueryOptions(_this.internalComponent, aggsQuery, false);
		var hasMounted = false;
		var cause = null;

		if (currentValue) {
			var calcValue = {
				term: currentValue,
				category: currentCategory
			};
			if (props.onChange) {
				props.onChange(calcValue, function () {
					return _this.triggerQuery(calcValue);
				});
			}
			_this.setValue(currentValue, true, props, currentCategory, cause, hasMounted);
		}
		return _this;
	}

	CategorySearch.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
		var _this2 = this;

		(0, _helper.checkSomePropChange)(this.props, prevProps, (0, _utils.getValidPropsKeys)(this.props), function () {
			_this2.props.updateComponentProps(_this2.props.componentId, _this2.props);
		});
		(0, _helper.checkSomePropChange)(this.props, prevProps, ['highlight', 'dataField', 'highlightField'], function () {
			var queryOptions = CategorySearch.highlightQuery(_this2.props) || {};
			queryOptions.size = _this2.props.size;
			_this2.queryOptions = queryOptions;
			_this2.props.setQueryOptions(_this2.props.componentId, queryOptions);
		});

		// Treat defaultQuery and customQuery as reactive props
		if (!(0, _utils.isIdentical)(this.props.defaultQuery, prevProps.defaultQuery)) {
			this.updateDefaultQuery(this.state.currentValue, this.props);
			this.updateQuery(this.state.currentValue, this.props);
		}

		if (!(0, _utils.isIdentical)(this.props.customQuery, prevProps.customQuery)) {
			this.updateQuery(this.state.currentValue, this.props);
		}

		(0, _helper.checkPropChange)(this.props.react, prevProps.react, function () {
			return _this2.setReact(_this2.props);
		});

		if (Array.isArray(this.props.suggestions) && this.state.currentValue.trim().length) {
			// shallow check allows us to set suggestions even if the next set
			// of suggestions are same as the current one

			if (this.props.suggestions !== prevProps.suggestions) {
				if (this.props.onSuggestions) {
					this.props.onSuggestions(this.props.suggestions);
				}
				// eslint-disable-next-line
				this.setState({
					suggestions: this.onSuggestions(this.props.suggestions)
				});
			}
		}

		(0, _helper.checkSomePropChange)(this.props, prevProps, ['fieldWeights', 'fuzziness', 'queryFormat', 'dataField', 'categoryField', 'nestedField', 'searchOperators'], function () {
			_this2.updateQuery(_this2.state.currentValue, _this2.props);
		});

		if (!(0, _helper.isEqual)(this.props.value, prevProps.value)) {
			var _props$value = this.props.value,
			    currentValue = _props$value.term,
			    _props$value$category = _props$value.category,
			    currentCategory = _props$value$category === undefined ? null : _props$value$category;

			this.setValue(currentValue, true, this.props, currentCategory, undefined, undefined, false);
		} else if (
		// since, selectedValue will be updated when currentValue changes,
		// we must only check for the changes introduced by
		// clear action from SelectedFilters component in which case,
		// the currentValue will never match the updated selectedValue
		this.props.selectedValue !== prevProps.selectedValue && this.state.currentValue !== this.props.selectedValue) {
			var _props = this.props,
			    value = _props.value,
			    onChange = _props.onChange;

			if (value === undefined) {
				this.setValue(this.props.selectedValue || '', true, this.props, this.props.selectedCategory);
			} else if (onChange) {
				var _currentValue = {
					term: this.props.selectedValue || '',
					category: this.props.selectedCategory || null
				};
				// value prop exists
				onChange(_currentValue, function () {
					return _this2.triggerQuery(_currentValue);
				});
			} else {
				// value prop exists and onChange is not defined:
				// we need to put the current value back into the store
				// if the clear action was triggered by interacting with
				// selected-filters component
				this.isPending = false;
				this.setValue(this.state.currentValue, true, this.props, this.state.currentCategory);
			}
		}
	};

	CategorySearch.prototype.componentWillUnmount = function componentWillUnmount() {
		this.props.removeComponent(this.props.componentId);
		this.props.removeComponent(this.internalComponent);
	};

	CategorySearch.prototype.render = function render() {
		var _this3 = this;

		var currentValue = this.state.currentValue;
		var _props2 = this.props,
		    theme = _props2.theme,
		    themePreset = _props2.themePreset;

		var finalSuggestionsList = this.parsedSuggestions;
		return _react2.default.createElement(
			_Container2.default,
			{ style: this.props.style, className: this.props.className },
			this.props.title && _react2.default.createElement(
				_Title2.default,
				{ className: (0, _helper.getClassName)(this.props.innerClass, 'title') || null },
				this.props.title
			),
			this.props.defaultSuggestions || this.props.autosuggest ? _react2.default.createElement(_downshift2.default, _extends({
				id: this.props.componentId + '-downshift',
				onChange: this.onSuggestionSelected,
				onStateChange: this.handleStateChange,
				isOpen: this.state.isOpen,
				itemToString: function itemToString(i) {
					return i;
				},
				render: function render(_ref) {
					var getInputProps = _ref.getInputProps,
					    getItemProps = _ref.getItemProps,
					    isOpen = _ref.isOpen,
					    highlightedIndex = _ref.highlightedIndex,
					    rest = _objectWithoutProperties(_ref, ['getInputProps', 'getItemProps', 'isOpen', 'highlightedIndex']);

					return _react2.default.createElement(
						'div',
						{ className: _Input.suggestionsContainer },
						_react2.default.createElement(_Input2.default, _extends({
							innerRef: function innerRef(c) {
								_this3._inputRef = c;
							},
							'aria-label': _this3.props.componentId,
							showClear: _this3.props.showClear,
							id: _this3.props.componentId + '-input',
							showIcon: _this3.props.showIcon,
							iconPosition: _this3.props.iconPosition
						}, getInputProps({
							className: (0, _helper.getClassName)(_this3.props.innerClass, 'input'),
							placeholder: _this3.props.placeholder,
							value: _this3.state.currentValue === null ? '' : _this3.state.currentValue,
							onChange: _this3.onInputChange,
							onBlur: _this3.withTriggerQuery(_this3.props.onBlur),
							onFocus: _this3.handleFocus,
							onKeyPress: _this3.withTriggerQuery(_this3.props.onKeyPress),
							onKeyDown: function onKeyDown(e) {
								return _this3.handleKeyDown(e, highlightedIndex);
							},
							onKeyUp: _this3.withTriggerQuery(_this3.props.onKeyUp)
						}), {
							themePreset: themePreset
						})),
						_this3.renderIcons(),
						_this3.renderLoader(),
						_this3.renderError(),
						_this3.hasCustomRenderer && _this3.getComponent(_extends({
							getInputProps: getInputProps,
							getItemProps: getItemProps,
							isOpen: isOpen,
							highlightedIndex: highlightedIndex
						}, rest)),
						!_this3.hasCustomRenderer && isOpen && finalSuggestionsList.length ? _react2.default.createElement(
							'ul',
							{
								className: (0, _Input.suggestions)(themePreset, theme) + ' ' + (0, _helper.getClassName)(_this3.props.innerClass, 'list')
							},
							finalSuggestionsList.slice(0, 10).map(function (item, index) {
								return _react2.default.createElement(
									'li',
									_extends({}, getItemProps({ item: item }), {
										key: index + 1 + '-' + item.value,
										style: {
											backgroundColor: _this3.getBackgroundColor(highlightedIndex, index)
										}
									}),
									_react2.default.createElement(
										Text,
										{ primary: !!item.category },
										_react2.default.createElement(_SuggestionItem2.default, {
											currentValue: currentValue,
											suggestion: item
										})
									)
								);
							})
						) : _this3.renderNoSuggestion(finalSuggestionsList)
					);
				}
			}, this.props.downShiftProps)) : _react2.default.createElement(
				'div',
				{ className: _Input.suggestionsContainer },
				_react2.default.createElement(_Input2.default, {
					innerRef: function innerRef(c) {
						_this3._inputRef = c;
					},
					'aria-label': this.props.componentId,
					className: (0, _helper.getClassName)(this.props.innerClass, 'input'),
					placeholder: this.props.placeholder,
					value: this.state.currentValue ? this.state.currentValue : '',
					onChange: this.onInputChange,
					onBlur: this.withTriggerQuery(this.props.onBlur),
					onFocus: this.withTriggerQuery(this.props.onFocus),
					onKeyPress: this.withTriggerQuery(this.props.onKeyPress),
					onKeyDown: this.withTriggerQuery(this.props.onKeyDown),
					onKeyUp: this.withTriggerQuery(this.props.onKeyUp),
					autoFocus: this.props.autoFocus,
					iconPosition: this.props.iconPosition,
					showClear: this.props.showClear,
					showIcon: this.props.showIcon,
					themePreset: themePreset
				}),
				this.renderIcons()
			)
		);
	};

	_createClass(CategorySearch, [{
		key: 'stats',
		get: function get() {
			return (0, _helper.getResultStats)(this.props);
		}
	}, {
		key: 'hasCustomRenderer',
		get: function get() {
			return (0, _utils.hasCustomRenderer)(this.props);
		}
	}, {
		key: 'filteredCategories',
		get: function get() {
			var categories = this.props.categories;

			return categories.filter(function (category) {
				return Boolean(category.key);
			});
		}
	}, {
		key: 'parsedSuggestions',
		get: function get() {
			var finalSuggestionsList = [];
			var suggestionsList = [];

			// filter out empty categories
			var filteredCategories = this.filteredCategories;

			if (!this.state.currentValue && this.props.defaultSuggestions && this.props.defaultSuggestions.length) {
				finalSuggestionsList = this.props.defaultSuggestions;
			} else if (this.state.currentValue) {
				suggestionsList = this.state.suggestions;
			}

			if (this.state.currentValue && this.state.suggestions.length && filteredCategories.length) {
				var categorySuggestions = [{
					label: this.state.currentValue + ' in all categories',
					value: this.state.currentValue,
					category: '*',
					// no source object exists for category based suggestions
					source: null
				}, {
					label: this.state.currentValue + ' in ' + filteredCategories[0].key,
					value: this.state.currentValue,
					category: filteredCategories[0].key,
					source: null
				}];

				if (filteredCategories.length > 1) {
					categorySuggestions = [].concat(categorySuggestions, [{
						label: this.state.currentValue + ' in ' + filteredCategories[1].key,
						value: this.state.currentValue,
						category: filteredCategories[1].key,
						source: null
					}]);
				}
				finalSuggestionsList = [].concat(categorySuggestions, suggestionsList);
			}
			return (0, _helper.withClickIds)(finalSuggestionsList);
		}
	}]);

	return CategorySearch;
}(_react.Component);

CategorySearch.highlightQuery = function (props) {
	if (props.customHighlight) {
		return props.customHighlight(props);
	}
	if (!props.highlight) {
		return null;
	}
	var fields = {};
	var highlightField = props.highlightField ? props.highlightField : props.dataField;

	if (typeof highlightField === 'string') {
		fields[highlightField] = {};
	} else if (Array.isArray(highlightField)) {
		highlightField.forEach(function (item) {
			fields[item] = {};
		});
	}

	return {
		highlight: _extends({
			pre_tags: ['<mark>'],
			post_tags: ['</mark>'],
			fields: fields
		}, props.highlightField && { require_field_match: false })
	};
};

CategorySearch.defaultQuery = function (value, props, category) {
	var finalQuery = null;
	var fields = void 0;

	if (value) {
		if (Array.isArray(props.dataField)) {
			fields = props.dataField;
		} else {
			fields = [props.dataField];
		}
		if (props.searchOperators) {
			finalQuery = {
				simple_query_string: CategorySearch.shouldQuery(value, fields, props)
			};
		} else {
			finalQuery = {
				bool: {
					should: CategorySearch.shouldQuery(value, fields, props),
					minimum_should_match: '1'
				}
			};
		}

		if (category && category !== '*') {
			var _term;

			finalQuery = [finalQuery, {
				term: (_term = {}, _term[props.categoryField] = category, _term)
			}];
		}
	}

	if (value === '') {
		finalQuery = null;
	}

	if (finalQuery && props.nestedField) {
		finalQuery = {
			nested: {
				path: props.nestedField,
				query: finalQuery
			}
		};
	}

	return finalQuery;
};

CategorySearch.shouldQuery = function (value, dataFields, props) {
	var fields = dataFields.map(function (field, index) {
		return '' + field + (Array.isArray(props.fieldWeights) && props.fieldWeights[index] ? '^' + props.fieldWeights[index] : '');
	});

	if (props.searchOperators) {
		return {
			query: value,
			fields: fields,
			default_operator: props.queryFormat
		};
	}

	if (props.queryFormat === 'and') {
		return [{
			multi_match: {
				query: value,
				fields: fields,
				type: 'cross_fields',
				operator: 'and'
			}
		}, {
			multi_match: {
				query: value,
				fields: fields,
				type: 'phrase_prefix',
				operator: 'and'
			}
		}];
	}

	return [{
		multi_match: {
			query: value,
			fields: fields,
			type: 'best_fields',
			operator: 'or',
			fuzziness: props.fuzziness ? props.fuzziness : 0
		}
	}, {
		multi_match: {
			query: value,
			fields: fields,
			type: 'phrase_prefix',
			operator: 'or'
		}
	}];
};

var _initialiseProps = function _initialiseProps() {
	var _this4 = this;

	this.getAggsQuery = function (field) {
		var _aggs;

		return {
			aggs: (_aggs = {}, _aggs[field] = {
				terms: {
					field: field
				}
			}, _aggs)
		};
	};

	this.getCombinedAggsQuery = function () {
		var _props3 = _this4.props,
		    categoryField = _props3.categoryField,
		    aggregationField = _props3.aggregationField;

		var aggsQuery = _this4.getAggsQuery(categoryField);
		if (aggregationField) {
			var compositeAggsQuery = (0, _helper.getCompositeAggsQuery)({}, _this4.props, null, true);
			aggsQuery.aggs = _extends({}, aggsQuery.aggs, compositeAggsQuery.aggs);
		}
		return aggsQuery;
	};

	this.setReact = function (props) {
		var react = props.react;

		if (react) {
			var newReact = (0, _helper.pushToAndClause)(react, _this4.internalComponent);
			props.watchComponent(props.componentId, newReact);
		} else {
			props.watchComponent(props.componentId, {
				and: _this4.internalComponent
			});
		}
	};

	this.onSuggestions = function (searchResults) {
		return (0, _helper.handleOnSuggestions)(searchResults, _this4.state.currentValue, _this4.props);
	};

	this.setValue = function (value) {
		var isDefaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
		var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _this4.props;
		var category = arguments[3];
		var cause = arguments[4];
		var hasMounted = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
		var toggleIsOpen = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;

		var performUpdate = function performUpdate() {
			if (hasMounted) {
				_this4.setState({
					currentValue: value || '',
					currentCategory: category || null,
					suggestions: []
				}, function () {
					if (isDefaultValue) {
						if (_this4.props.autosuggest) {
							if (toggleIsOpen) {
								_this4.setState({
									isOpen: false
								});
							}
							_this4.updateDefaultQuery(value, props);
						}
						// in case of strict selection only SUGGESTION_SELECT should be able
						// to set the query otherwise the value should reset
						if (props.strictSelection) {
							if (cause === _causes2.default.SUGGESTION_SELECT || value === '') {
								_this4.updateQuery(value, props, category);
							} else {
								_this4.setValue('', true);
							}
						} else {
							_this4.updateQuery(value, props, category);
						}
					} else {
						// debounce for handling text while typing
						_this4.handleTextChange(value);
					}
					if (props.onValueChange) props.onValueChange(value);
				});
			} else {
				_this4.updateDefaultQuery(value, props);
				_this4.updateQuery(value, props, category);
				if (props.onValueChange) props.onValueChange(value);
			}
		};
		(0, _helper.checkValueChange)(props.componentId, value, props.beforeValueChange, performUpdate);
	};

	this.handleTextChange = (0, _helper.debounce)(function (value) {
		if (_this4.props.autosuggest) {
			_this4.updateDefaultQuery(value, _this4.props);
		} else {
			_this4.updateQuery(value, _this4.props);
		}
	}, this.props.debounce);

	this.updateDefaultQuery = function (value, props) {
		var category = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _this4.state.currentCategory;
		var defaultQuery = props.defaultQuery;

		var defaultQueryOptions = void 0;
		var query = CategorySearch.defaultQuery(value, props, category);
		if (defaultQuery) {
			var defaultQueryTobeSet = defaultQuery(value, props, category) || {};
			if (defaultQueryTobeSet.query) {
				query = defaultQueryTobeSet.query;
			}
			defaultQueryOptions = (0, _helper.getOptionsFromQuery)(defaultQueryTobeSet);
		}
		props.setSuggestionsSearchValue(value);
		var aggsQuery = _this4.getCombinedAggsQuery();
		props.setQueryOptions(_this4.internalComponent, _extends({}, _this4.queryOptions, aggsQuery, defaultQueryOptions));
		props.updateQuery({
			componentId: _this4.internalComponent,
			query: query,
			value: value,
			category: category,
			componentType: _constants.componentTypes.categorySearch
		});
	};

	this.updateQuery = function (value, props) {
		var category = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _this4.state.currentCategory;
		var customQuery = props.customQuery,
		    filterLabel = props.filterLabel,
		    showFilter = props.showFilter,
		    URLParams = props.URLParams;


		var customQueryOptions = void 0;
		var query = CategorySearch.defaultQuery(value, props, category);
		if (customQuery) {
			var customQueryTobeSet = customQuery(value, props, category) || {};
			if (customQueryTobeSet.query) {
				query = customQueryTobeSet.query;
			}
			customQueryOptions = (0, _helper.getOptionsFromQuery)(customQueryTobeSet);
		}

		// query options should be applied to the source component,
		// not on internal component, hence using `this.props.componentId` here
		props.setQueryOptions(props.componentId, _extends({}, _this4.queryOptions, customQueryOptions));
		if (!_this4.isPending) {
			props.updateQuery({
				componentId: props.componentId,
				query: query,
				value: value,
				label: filterLabel,
				showFilter: showFilter,
				URLParams: URLParams,
				componentType: _constants.componentTypes.categorySearch,
				category: category
			});
		}
	};

	this.handleFocus = function (event) {
		_this4.setState({
			isOpen: true
		});
		if (_this4.props.onFocus) {
			_this4.props.onFocus(event, _this4.triggerQuery);
		}
	};

	this.clearValue = function () {
		_this4.isPending = false;
		_this4.setValue('', true);
		_this4.onValueSelected(null, _causes2.default.CLEAR_VALUE, null);
	};

	this.handleKeyDown = function (event, highlightedIndex) {
		var _props4 = _this4.props,
		    value = _props4.value,
		    onChange = _props4.onChange;

		if (value !== undefined && onChange) {
			_this4.isPending = true;
		}
		// if a suggestion was selected, delegate the handling to suggestion handler
		if (event.key === 'Enter' && highlightedIndex === null) {
			_this4.setValue(event.target.value, true);
			var currentValue = {
				term: event.target.value,
				category: null
			};
			_this4.onValueSelected(currentValue, _causes2.default.ENTER_PRESS);
		}
		if (_this4.props.onKeyDown) {
			_this4.props.onKeyDown(event, _this4.triggerQuery);
		}
	};

	this.onInputChange = function (e) {
		var inputValue = e.target.value;

		if (!_this4.state.isOpen) {
			_this4.setState({
				isOpen: true
			});
		}

		var _props5 = _this4.props,
		    value = _props5.value,
		    onChange = _props5.onChange;

		if (value === undefined) {
			_this4.setValue(inputValue);
		} else if (onChange) {
			_this4.isPending = true;
			var currentValue = {
				term: inputValue
				// category: null,
			};
			// handle caret position in controlled components
			(0, _utils.handleCaretPosition)(e);
			onChange(currentValue, function () {
				return _this4.triggerQuery(currentValue);
			}, e);
		} else {
			_this4.setValue(inputValue);
		}
	};

	this.triggerQuery = function (value) {
		var currentValue = value.term,
		    _value$category2 = value.category,
		    currentCategory = _value$category2 === undefined ? null : _value$category2;

		_this4.isPending = false;
		_this4.setValue(currentValue, true, _this4.props, currentCategory);
	};

	this.onSuggestionSelected = function (suggestion) {
		var _props6 = _this4.props,
		    value = _props6.value,
		    onChange = _props6.onChange;

		var currentValue = {
			term: suggestion.value,
			category: suggestion.category || null
		};
		_this4.setState({
			isOpen: false
		});
		if (value === undefined) {
			_this4.setValue(currentValue.term, true, _this4.props, currentValue.category, _causes2.default.SUGGESTION_SELECT);
		} else if (onChange) {
			_this4.isPending = false;
			onChange(currentValue, function () {
				return _this4.triggerQuery(currentValue);
			});
		}
		// Record analytics for selected suggestions
		_this4.triggerClickAnalytics(suggestion._click_id);
		// onValueSelected is user interaction driven:
		// it should be triggered irrespective of controlled (or)
		// uncontrolled component behavior
		_this4.onValueSelected(currentValue, _causes2.default.SUGGESTION_SELECT, suggestion.source);
	};

	this.onValueSelected = function (selectedValue, cause, source) {
		var onValueSelected = _this4.props.onValueSelected;

		if (onValueSelected) {
			onValueSelected(selectedValue, cause, source);
		}
	};

	this.handleStateChange = function (changes) {
		var isOpen = changes.isOpen,
		    type = changes.type;

		if (type === _downshift2.default.stateChangeTypes.mouseUp) {
			_this4.setState({
				isOpen: isOpen
			});
		}
	};

	this.getBackgroundColor = function (highlightedIndex, index) {
		var isDark = _this4.props.themePreset === 'dark';
		if (isDark) {
			return highlightedIndex === index ? '#555' : '#424242';
		}
		return highlightedIndex === index ? '#eee' : '#fff';
	};

	this.handleSearchIconClick = function () {
		var currentValue = _this4.state.currentValue;

		if (currentValue.trim()) {
			_this4.isPending = false;
			_this4.setValue(currentValue, true);
		}
	};

	this.handleVoiceResults = function (_ref2) {
		var results = _ref2.results;

		if (results && results[0] && results[0].isFinal && results[0][0] && results[0][0].transcript && results[0][0].transcript.trim()) {
			_this4.isPending = false;
			_this4.setValue(results[0][0].transcript.trim(), true);
			if (_this4.props.autosuggest) {
				_this4._inputRef.focus();
				_this4.setState({
					isOpen: true
				});
			}
		}
	};

	this.renderIcon = function () {
		if (_this4.props.showIcon) {
			return _this4.props.icon || _react2.default.createElement(_SearchSvg2.default, null);
		}
		return null;
	};

	this.renderCancelIcon = function () {
		if (_this4.props.showClear) {
			return _this4.props.clearIcon || _react2.default.createElement(_CancelSvg2.default, null);
		}
		return null;
	};

	this.renderIcons = function () {
		var currentValue = _this4.state.currentValue;
		var _props7 = _this4.props,
		    showIcon = _props7.showIcon,
		    showClear = _props7.showClear,
		    renderMic = _props7.renderMic,
		    getMicInstance = _props7.getMicInstance,
		    showVoiceSearch = _props7.showVoiceSearch,
		    iconPosition = _props7.iconPosition,
		    innerClass = _props7.innerClass;

		return _react2.default.createElement(
			'div',
			null,
			_this4.state.currentValue && showClear && _react2.default.createElement(
				_InputIcon2.default,
				{
					onClick: _this4.clearValue,
					iconPosition: 'right',
					clearIcon: iconPosition === 'right',
					showIcon: showIcon,
					isClearIcon: true
				},
				_this4.renderCancelIcon()
			),
			showVoiceSearch && _react2.default.createElement(_Mic2.default, {
				getInstance: getMicInstance,
				render: renderMic,
				iconPosition: iconPosition,
				onResult: _this4.handleVoiceResults,
				className: (0, _helper.getClassName)(innerClass, 'mic') || null,
				applyClearStyle: !!currentValue && showClear,
				showIcon: showIcon
			}),
			_react2.default.createElement(
				_InputIcon2.default,
				{
					onClick: _this4.handleSearchIconClick,
					iconPosition: iconPosition,
					showIcon: showIcon
				},
				_this4.renderIcon()
			)
		);
	};

	this.renderNoSuggestion = function () {
		var finalSuggestionsList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
		var _props8 = _this4.props,
		    themePreset = _props8.themePreset,
		    theme = _props8.theme,
		    isLoading = _props8.isLoading,
		    renderNoSuggestion = _props8.renderNoSuggestion,
		    innerClass = _props8.innerClass,
		    renderError = _props8.renderError,
		    error = _props8.error;
		var _state = _this4.state,
		    isOpen = _state.isOpen,
		    currentValue = _state.currentValue;

		if (renderNoSuggestion && isOpen && !finalSuggestionsList.length && !isLoading && currentValue && !(renderError && error)) {
			return _react2.default.createElement(
				_SuggestionWrapper2.default,
				{
					innerClass: innerClass,
					themePreset: themePreset,
					theme: theme,
					innerClassName: 'noSuggestion'
				},
				typeof renderNoSuggestion === 'function' ? renderNoSuggestion(currentValue) : renderNoSuggestion
			);
		}
		return null;
	};

	this.renderLoader = function () {
		var _props9 = _this4.props,
		    loader = _props9.loader,
		    isLoading = _props9.isLoading,
		    themePreset = _props9.themePreset,
		    theme = _props9.theme,
		    innerClass = _props9.innerClass;
		var currentValue = _this4.state.currentValue;

		if (isLoading && loader && currentValue) {
			return _react2.default.createElement(
				_SuggestionWrapper2.default,
				{
					innerClass: innerClass,
					innerClassName: 'loader',
					theme: theme,
					themePreset: themePreset
				},
				loader
			);
		}
		return null;
	};

	this.renderError = function () {
		var _props10 = _this4.props,
		    error = _props10.error,
		    renderError = _props10.renderError,
		    themePreset = _props10.themePreset,
		    theme = _props10.theme,
		    isLoading = _props10.isLoading,
		    innerClass = _props10.innerClass;
		var currentValue = _this4.state.currentValue;

		if (error && renderError && currentValue && !isLoading) {
			return _react2.default.createElement(
				_SuggestionWrapper2.default,
				{
					innerClass: innerClass,
					innerClassName: 'error',
					theme: theme,
					themePreset: themePreset
				},
				(0, _utils.isFunction)(renderError) ? renderError(error) : renderError
			);
		}
		return null;
	};

	this.getComponent = function () {
		var downshiftProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
		var _props11 = _this4.props,
		    error = _props11.error,
		    isLoading = _props11.isLoading,
		    aggregationData = _props11.aggregationData,
		    promotedResults = _props11.promotedResults;
		var currentValue = _this4.state.currentValue;

		var data = {
			error: error,
			loading: isLoading,
			downshiftProps: downshiftProps,
			data: _this4.parsedSuggestions,
			promotedData: promotedResults,
			aggregationData: aggregationData || [],
			value: currentValue,
			suggestions: _this4.state.suggestions,
			rawSuggestions: _this4.props.suggestions || [],
			categories: _this4.filteredCategories,
			rawCategories: _this4.props.categories,
			triggerClickAnalytics: _this4.triggerClickAnalytics,
			resultStats: _this4.stats
		};
		return (0, _utils.getComponent)(data, _this4.props);
	};

	this.triggerClickAnalytics = function (searchPosition) {
		// click analytics would only work client side and after javascript loads
		_this4.props.triggerAnalytics(searchPosition);
	};

	this.withTriggerQuery = function (func) {
		if (func) {
			return function (e) {
				return func(e, function () {
					return _this4.triggerQuery(_this4.props.value);
				});
			};
		}
		return undefined;
	};
};

CategorySearch.propTypes = {
	addComponent: _types2.default.funcRequired,
	removeComponent: _types2.default.funcRequired,
	setQueryListener: _types2.default.funcRequired,
	setQueryOptions: _types2.default.funcRequired,
	updateQuery: _types2.default.funcRequired,
	watchComponent: _types2.default.funcRequired,
	setSuggestionsSearchValue: _types2.default.funcRequired,
	options: _types2.default.options,
	categories: _types2.default.data,
	promotedResults: _types2.default.hits,
	selectedValue: _types2.default.selectedValue,
	selectedCategory: _types2.default.selectedValue,
	suggestions: _types2.default.suggestions,
	aggregationData: _types2.default.aggregationData,
	setComponentProps: _types2.default.funcRequired,
	updateComponentProps: _types2.default.funcRequired,
	isLoading: _types2.default.bool,
	config: _types2.default.props,
	triggerAnalytics: _types2.default.funcRequired,
	// eslint-disable-next-line
	error: _types2.default.any,
	// component props
	autoFocus: _types2.default.bool,
	autosuggest: _types2.default.bool,
	beforeValueChange: _types2.default.func,
	categoryField: _types2.default.string,
	className: _types2.default.string,
	clearIcon: _types2.default.children,
	componentId: _types2.default.stringRequired,
	customHighlight: _types2.default.func,
	customQuery: _types2.default.func,
	defaultQuery: _types2.default.func,
	dataField: _types2.default.dataFieldArray,
	aggregationField: _types2.default.string,
	size: _types2.default.number,
	debounce: _types2.default.number,
	defaultValue: _types2.default.categorySearchValue,
	value: _types2.default.categorySearchValue,
	defaultSuggestions: _types2.default.suggestions,
	downShiftProps: _types2.default.props,
	fieldWeights: _types2.default.fieldWeights,
	filterLabel: _types2.default.string,
	fuzziness: _types2.default.fuzziness,
	highlight: _types2.default.bool,
	highlightField: _types2.default.stringOrArray,
	icon: _types2.default.children,
	iconPosition: _types2.default.iconPosition,
	innerClass: _types2.default.style,
	loader: _types2.default.title,
	nestedField: _types2.default.string,
	onError: _types2.default.func,
	onBlur: _types2.default.func,
	onFocus: _types2.default.func,
	onKeyDown: _types2.default.func,
	onKeyPress: _types2.default.func,
	onKeyUp: _types2.default.func,
	onQueryChange: _types2.default.func,
	onSuggestions: _types2.default.func,
	onValueChange: _types2.default.func,
	onChange: _types2.default.func,
	onValueSelected: _types2.default.func,
	placeholder: _types2.default.string,
	queryFormat: _types2.default.queryFormatSearch,
	react: _types2.default.react,
	renderError: _types2.default.title,
	parseSuggestion: _types2.default.func,
	renderNoSuggestion: _types2.default.title,
	showClear: _types2.default.bool,
	showFilter: _types2.default.bool,
	showVoiceSearch: _types2.default.bool,
	showIcon: _types2.default.bool,
	style: _types2.default.style,
	title: _types2.default.title,
	theme: _types2.default.style,
	themePreset: _types2.default.themePreset,
	URLParams: _types2.default.bool,
	strictSelection: _types2.default.bool,
	searchOperators: _types2.default.bool,
	// Mic props
	getMicInstance: _types2.default.func,
	renderMic: _types2.default.func
};

CategorySearch.defaultProps = {
	autosuggest: true,
	className: null,
	debounce: 0,
	downShiftProps: {},
	iconPosition: 'left',
	placeholder: 'Search',
	queryFormat: 'or',
	showClear: false,
	showFilter: true,
	showIcon: true,
	style: {},
	URLParams: false,
	strictSelection: false,
	searchOperators: false,
	showVoiceSearch: false,
	size: 20
};

var mapStateToProps = function mapStateToProps(state, props) {
	return {
		categories: state.aggregations[props.componentId] && state.aggregations[props.componentId][props.categoryField] && state.aggregations[props.componentId][props.categoryField].buckets || [],
		selectedValue: state.selectedValues[props.componentId] && state.selectedValues[props.componentId].value || null,
		selectedCategory: state.selectedValues[props.componentId] && state.selectedValues[props.componentId].category || null,
		suggestions: state.hits[props.componentId] && state.hits[props.componentId].hits || [],
		aggregationData: state.compositeAggregations[props.componentId] || [],
		themePreset: state.config.themePreset,
		isLoading: state.isLoading[props.componentId],
		error: state.error[props.componentId],
		config: state.config,
		promotedResults: state.promotedResults[props.componentId] || [],
		time: state.hits[props.componentId] && state.hits[props.componentId].time || 0,
		total: state.hits[props.componentId] && state.hits[props.componentId].total,
		hidden: state.hits[props.componentId] && state.hits[props.componentId].hidden
	};
};

var mapDispatchtoProps = function mapDispatchtoProps(dispatch) {
	return {
		setSuggestionsSearchValue: function setSuggestionsSearchValue(value) {
			return dispatch((0, _actions.setSuggestionsSearchValue)(value));
		},
		setComponentProps: function setComponentProps(component, options) {
			return dispatch((0, _actions.setComponentProps)(component, options));
		},
		updateComponentProps: function updateComponentProps(component, options) {
			return dispatch((0, _actions.updateComponentProps)(component, options));
		},
		addComponent: function addComponent(component) {
			return dispatch((0, _actions.addComponent)(component));
		},
		removeComponent: function removeComponent(component) {
			return dispatch((0, _actions.removeComponent)(component));
		},
		setQueryOptions: function setQueryOptions(component, props, execute) {
			return dispatch((0, _actions.setQueryOptions)(component, props, execute));
		},
		setQueryListener: function setQueryListener(component, onQueryChange, beforeQueryChange) {
			return dispatch((0, _actions.setQueryListener)(component, onQueryChange, beforeQueryChange));
		},
		updateQuery: function updateQuery(updateQueryObject) {
			return dispatch((0, _actions.updateQuery)(updateQueryObject));
		},
		watchComponent: function watchComponent(component, react) {
			return dispatch((0, _actions.watchComponent)(component, react));
		},
		triggerAnalytics: function triggerAnalytics(searchPosition) {
			return dispatch((0, _actions.recordSuggestionClick)(searchPosition));
		}
	};
};

var ConnectedComponent = (0, _utils.connect)(mapStateToProps, mapDispatchtoProps)((0, _emotionTheming.withTheme)(function (props) {
	return _react2.default.createElement(CategorySearch, _extends({ ref: props.myForwardedRef }, props));
}));

// eslint-disable-next-line
var ForwardRefComponent = _react2.default.forwardRef(function (props, ref) {
	return _react2.default.createElement(ConnectedComponent, _extends({}, props, { myForwardedRef: ref }));
});
(0, _hoistNonReactStatics2.default)(ForwardRefComponent, CategorySearch);

ForwardRefComponent.name = 'CategorySearch';
exports.default = ForwardRefComponent;