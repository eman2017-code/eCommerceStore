'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _actions = require('@appbaseio/reactivecore/lib/actions');

var _helper = require('@appbaseio/reactivecore/lib/utils/helper');

var _types = require('@appbaseio/reactivecore/lib/utils/types');

var _types2 = _interopRequireDefault(_types);

var _utils = require('../../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ReactiveComponent = function (_Component) {
	_inherits(ReactiveComponent, _Component);

	function ReactiveComponent(props) {
		_classCallCheck(this, ReactiveComponent);

		var _this = _possibleConstructorReturn(this, _Component.call(this, props));

		_initialiseProps.call(_this);

		_this.internalComponent = null;
		_this.defaultQuery = null;
		props.setQueryListener(props.componentId, props.onQueryChange, props.onError);

		_this.setQuery = function (_ref) {
			var options = _ref.options,
			    obj = _objectWithoutProperties(_ref, ['options']);

			if (options) {
				props.setQueryOptions(props.componentId, _extends({}, options, _this.getAggsQuery()), false);
			}
			_this.props.updateQuery(_extends({}, obj, {
				componentId: props.componentId,
				label: props.filterLabel,
				showFilter: props.showFilter,
				URLParams: props.URLParams
			}));
		};

		if (props.defaultQuery) {
			_this.internalComponent = props.componentId + '__internal';
		}

		props.addComponent(props.componentId);
		props.setComponentProps(props.componentId, props);
		if (_this.internalComponent) {
			props.addComponent(_this.internalComponent);
		}

		_this.setReact(props);

		if (_this.internalComponent && props.defaultQuery) {
			_this.defaultQuery = props.defaultQuery();

			var _ref2 = _this.defaultQuery || {},
			    query = _ref2.query;

			var defaultQueryOptions = _this.defaultQuery ? (0, _helper.getOptionsFromQuery)(_this.defaultQuery) : null;

			if (defaultQueryOptions) {
				props.setQueryOptions(_this.internalComponent, _extends({}, defaultQueryOptions, _this.getAggsQuery()), false);
			} else _this.props.setQueryOptions(_this.internalComponent, _this.getAggsQuery());

			props.updateQuery({
				componentId: _this.internalComponent,
				query: query || null
			});
		}
		return _this;
	}

	ReactiveComponent.prototype.componentDidMount = function componentDidMount() {
		var _props = this.props,
		    customQuery = _props.customQuery,
		    selectedValue = _props.selectedValue,
		    value = _props.value,
		    defaultValue = _props.defaultValue,
		    componentId = _props.componentId,
		    filterLabel = _props.filterLabel,
		    showFilter = _props.showFilter,
		    URLParams = _props.URLParams;

		var initialValue = selectedValue || value || defaultValue || null;

		if (customQuery) {
			var calcCustomQuery = customQuery(this.props);

			var _ref3 = calcCustomQuery || {},
			    query = _ref3.query;

			var customQueryOptions = calcCustomQuery ? (0, _helper.getOptionsFromQuery)(calcCustomQuery) : null;
			if (customQueryOptions) {
				this.props.setQueryOptions(componentId, _extends({}, customQueryOptions, this.getAggsQuery()), false);
			} else this.props.setQueryOptions(componentId, this.getAggsQuery(), false);
			this.props.updateQuery({
				componentId: componentId,
				query: query,
				value: initialValue,
				label: filterLabel,
				showFilter: showFilter,
				URLParams: URLParams
			});
		}
	};

	ReactiveComponent.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
		var _this2 = this;

		(0, _helper.checkSomePropChange)(this.props, prevProps, (0, _utils.getValidPropsKeys)(this.props), function () {
			_this2.props.updateComponentProps(_this2.props.componentId, _this2.props);
		});
		// only consider hits and defaultQuery when customQuery is absent
		if (this.props.onData) {
			(0, _helper.checkSomePropChange)(this.props, prevProps, ['hits', 'aggregations', 'promotedResults', 'total', 'time', 'hidden'], function () {
				_this2.props.onData(_this2.getData());
			});
		}

		if (this.props.defaultQuery && !(0, _helper.isEqual)(this.props.defaultQuery(), this.defaultQuery)) {
			this.defaultQuery = this.props.defaultQuery();

			var _ref4 = this.defaultQuery || {},
			    query = _ref4.query,
			    queryOptions = _objectWithoutProperties(_ref4, ['query']);

			if (queryOptions) {
				this.props.setQueryOptions(this.internalComponent, _extends({}, queryOptions, this.getAggsQuery()), false);
			} else this.props.setQueryOptions(this.internalComponent, this.getAggsQuery(), false);

			this.props.updateQuery({
				componentId: this.internalComponent,
				query: query || null
			});
		}

		if (this.props.customQuery && !(0, _helper.isEqual)(this.props.customQuery(this.props), prevProps.customQuery(this.props))) {
			var _ref5 = this.props.customQuery(this.props) || {},
			    _query = _ref5.query,
			    _queryOptions = _objectWithoutProperties(_ref5, ['query']);

			if (_queryOptions) {
				this.props.setQueryOptions(this.props.componentId, _extends({}, _queryOptions, this.getAggsQuery()), false);
			} else this.props.setQueryOptions(this.props.componentId, this.getAggsQuery(), false);

			this.props.updateQuery({
				componentId: this.props.componentId,
				query: _query || null
			});
		}

		(0, _helper.checkPropChange)(this.props.react, prevProps.react, function () {
			_this2.setReact(_this2.props);
		});
	};

	ReactiveComponent.prototype.componentWillUnmount = function componentWillUnmount() {
		this.props.removeComponent(this.props.componentId);

		if (this.internalComponent) {
			this.props.removeComponent(this.internalComponent);
		}
	};

	ReactiveComponent.prototype.getData = function getData() {
		var _props2 = this.props,
		    hits = _props2.hits,
		    aggregations = _props2.aggregations,
		    aggregationData = _props2.aggregationData,
		    promotedResults = _props2.promotedResults;

		var filteredResults = (0, _helper.parseHits)(hits);
		if (promotedResults.length) {
			var ids = promotedResults.map(function (item) {
				return item._id;
			}).filter(Boolean);
			if (ids) {
				filteredResults = filteredResults.filter(function (item) {
					return !ids.includes(item._id);
				});
			}
			filteredResults = [].concat(promotedResults, filteredResults);
		}
		return {
			data: filteredResults,
			promotedData: promotedResults,
			aggregationData: aggregationData || [],
			rawData: hits,
			aggregations: aggregations,
			resultStats: this.stats
		};
	};

	ReactiveComponent.prototype.getComponent = function getComponent() {
		var _props3 = this.props,
		    error = _props3.error,
		    isLoading = _props3.isLoading,
		    selectedValue = _props3.selectedValue;

		var data = _extends({
			error: error,
			loading: isLoading
		}, this.getData(), {
			value: selectedValue,
			setQuery: this.setQuery
		});
		return (0, _utils.getComponent)(data, this.props);
	};

	ReactiveComponent.prototype.render = function render() {
		if ((0, _utils.hasCustomRenderer)(this.props)) {
			return this.getComponent();
		}
		return null;
	};

	_createClass(ReactiveComponent, [{
		key: 'stats',
		get: function get() {
			return (0, _helper.getResultStats)(this.props);
		}
	}]);

	return ReactiveComponent;
}(_react.Component);

var _initialiseProps = function _initialiseProps() {
	var _this3 = this;

	this.getAggsQuery = function () {
		if (_this3.props.aggregationField) {
			return (0, _helper.getCompositeAggsQuery)({}, _this3.props, null, true);
		}
		return {};
	};

	this.setReact = function (props) {
		var react = props.react;


		if (react) {
			if (_this3.internalComponent) {
				var newReact = (0, _helper.pushToAndClause)(react, _this3.internalComponent);
				props.watchComponent(props.componentId, newReact);
			} else {
				props.watchComponent(props.componentId, react);
			}
		} else if (_this3.internalComponent) {
			props.watchComponent(props.componentId, {
				and: _this3.internalComponent
			});
		}
	};
};

ReactiveComponent.defaultProps = {
	showFilter: true,
	URLParams: false,
	size: 20
};

ReactiveComponent.propTypes = {
	addComponent: _types2.default.funcRequired,
	error: _types2.default.title,
	removeComponent: _types2.default.funcRequired,
	setQueryListener: _types2.default.funcRequired,
	setQueryOptions: _types2.default.funcRequired,
	updateQuery: _types2.default.funcRequired,
	watchComponent: _types2.default.funcRequired,
	aggregationField: _types2.default.string,
	size: _types2.default.number,
	aggregations: _types2.default.selectedValues,
	aggregationData: _types2.default.aggregationData,
	hits: _types2.default.data,
	promotedResults: _types2.default.hits,
	isLoading: _types2.default.bool,
	selectedValue: _types2.default.selectedValue,
	setComponentProps: _types2.default.funcRequired,
	updateComponentProps: _types2.default.funcRequired,
	// component props
	children: _types2.default.func,
	componentId: _types2.default.stringRequired,
	defaultQuery: _types2.default.func,
	customQuery: _types2.default.func,
	defaultValue: _types2.default.any, // eslint-disable-line
	value: _types2.default.any, // eslint-disable-line
	filterLabel: _types2.default.string,
	onQueryChange: _types2.default.func,
	onError: _types2.default.func,
	react: _types2.default.react,
	render: _types2.default.func,
	showFilter: _types2.default.bool,
	URLParams: _types2.default.bool,
	onData: _types2.default.func
};

var mapStateToProps = function mapStateToProps(state, props) {
	return {
		aggregations: state.aggregations[props.componentId] && state.aggregations[props.componentId] || null,
		aggregationData: state.compositeAggregations[props.componentId] || [],
		hits: state.hits[props.componentId] && state.hits[props.componentId].hits || [],
		selectedValue: state.selectedValues[props.componentId] && state.selectedValues[props.componentId].value || null,
		isLoading: state.isLoading[props.componentId],
		error: state.error[props.componentId],
		promotedResults: state.promotedResults[props.componentId] || [],
		time: state.hits[props.componentId] && state.hits[props.componentId].time || 0,
		total: state.hits[props.componentId] && state.hits[props.componentId].total,
		hidden: state.hits[props.componentId] && state.hits[props.componentId].hidden
	};
};

var mapDispatchtoProps = function mapDispatchtoProps(dispatch) {
	return {
		setComponentProps: function setComponentProps(component, options) {
			return dispatch((0, _actions.setComponentProps)(component, options));
		},
		updateComponentProps: function updateComponentProps(component, options) {
			return dispatch((0, _actions.updateComponentProps)(component, options));
		},
		addComponent: function addComponent(component) {
			return dispatch((0, _actions.addComponent)(component));
		},
		removeComponent: function removeComponent(component) {
			return dispatch((0, _actions.removeComponent)(component));
		},
		setQueryOptions: function setQueryOptions(component, props, execute) {
			return dispatch((0, _actions.setQueryOptions)(component, props, execute));
		},
		setQueryListener: function setQueryListener(component, onQueryChange, beforeQueryChange) {
			return dispatch((0, _actions.setQueryListener)(component, onQueryChange, beforeQueryChange));
		},
		updateQuery: function updateQuery(updateQueryObject) {
			return dispatch((0, _actions.updateQuery)(updateQueryObject));
		},
		watchComponent: function watchComponent(component, react) {
			return dispatch((0, _actions.watchComponent)(component, react));
		}
	};
};

var ConnectedComponent = (0, _utils.connect)(mapStateToProps, mapDispatchtoProps)(function (props) {
	return _react2.default.createElement(ReactiveComponent, _extends({ ref: props.myForwardedRef }, props));
});

// eslint-disable-next-line
var ForwardRefComponent = _react2.default.forwardRef(function (props, ref) {
	return _react2.default.createElement(ConnectedComponent, _extends({}, props, { myForwardedRef: ref }));
});

ForwardRefComponent.name = 'ReactiveComponent';
exports.default = ForwardRefComponent;