'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _hoistNonReactStatics = require('hoist-non-react-statics');

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

var _actions = require('@appbaseio/reactivecore/lib/actions');

var _helper = require('@appbaseio/reactivecore/lib/utils/helper');

var _types = require('@appbaseio/reactivecore/lib/utils/types');

var _types2 = _interopRequireDefault(_types);

var _constants = require('@appbaseio/reactivecore/lib/utils/constants');

var _Pagination = require('./addons/Pagination');

var _Pagination2 = _interopRequireDefault(_Pagination);

var _PoweredBy = require('./addons/PoweredBy');

var _PoweredBy2 = _interopRequireDefault(_PoweredBy);

var _Flex = require('../../styles/Flex');

var _Flex2 = _interopRequireDefault(_Flex);

var _results = require('../../styles/results');

var _Card = require('../../styles/Card');

var _ListItem = require('../../styles/ListItem');

var _utils = require('../../utils');

var _Results = require('./addons/Results');

var _Results2 = _interopRequireDefault(_Results);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ReactiveList = function (_Component) {
	_inherits(ReactiveList, _Component);

	function ReactiveList(props) {
		_classCallCheck(this, ReactiveList);

		// no support for pagination and aggregationField together
		var _this = _possibleConstructorReturn(this, _Component.call(this, props));

		_initialiseProps.call(_this);

		if (props.pagination && props.aggregationField) {
			console.warn('Pagination is not supported when aggregationField is present. The list will be rendered with infinite scroll');
		}

		var currentPage = 0;
		if (_this.props.defaultPage >= 0) {
			currentPage = _this.props.defaultPage;
		} else if (_this.props.currentPage) {
			currentPage = Math.max(_this.props.currentPage - 1, 0);
		}
		_this.initialFrom = currentPage * props.size; // used for page resetting on query change
		_this.shouldRenderPagination = props.pagination && !props.aggregationField;
		_this.state = {
			from: _this.initialFrom,
			currentPage: currentPage
		};
		_this.internalComponent = props.componentId + '__internal';
		_this.sortOptionIndex = _this.props.defaultSortOption ? _this.props.sortOptions.findIndex(function (s) {
			return s.label === _this.props.defaultSortOption;
		}) : 0;

		props.setQueryListener(props.componentId, props.onQueryChange, props.onError);
		return _this;
	}

	ReactiveList.prototype.componentDidMount = function componentDidMount() {
		this.props.addComponent(this.internalComponent);
		this.props.addComponent(this.props.componentId);
		this.props.setComponentProps(this.props.componentId, _extends({}, this.props, {
			componentType: _constants.componentTypes.reactiveList
		}));
		if (this.props.stream) {
			this.props.setStreaming(this.props.componentId, true);
		}

		var options = (0, _helper.getQueryOptions)(this.props);
		options.from = this.state.from;
		if (this.props.sortOptions) {
			var _ref;

			options.sort = [(_ref = {}, _ref[this.props.sortOptions[this.sortOptionIndex].dataField] = {
				order: this.props.sortOptions[this.sortOptionIndex].sortBy
			}, _ref)];
		} else if (this.props.sortBy) {
			var _ref2;

			options.sort = [(_ref2 = {}, _ref2[this.props.dataField] = {
				order: this.props.sortBy
			}, _ref2)];
		}

		// Override sort query with defaultQuery's sort if defined
		this.defaultQuery = null;
		if (this.props.defaultQuery) {
			this.defaultQuery = this.props.defaultQuery();
			options = _extends({}, options, (0, _helper.getOptionsFromQuery)(this.defaultQuery));
		}

		var _ref3 = this.defaultQuery || {},
		    query = _ref3.query;

		// execute is set to false at the time of mount
		// to avoid firing (multiple) partial queries.
		// Hence we are building the query in parts here
		// and only executing it with setReact() at core


		var execute = false;

		this.props.setQueryOptions(this.props.componentId, _extends({}, options, this.getAggsQuery()), execute);

		if (this.defaultQuery) {
			this.props.updateQuery({
				componentId: this.internalComponent,
				query: query
			}, execute);
		} else {
			this.props.updateQuery({
				componentId: this.internalComponent,
				query: null
			}, execute);
		}

		// query will be executed here
		this.setReact(this.props);

		this.domNode = window;
		if (this.showInfiniteScroll) {
			var scrollTarget = this.props.scrollTarget;

			if (typeof scrollTarget === 'string' || scrollTarget instanceof String) {
				this.domNode = document.getElementById(scrollTarget);
			} else if (scrollTarget instanceof Element || scrollTarget instanceof HTMLDocument) {
				this.domNode = scrollTarget;
			}
			this.domNode.addEventListener('scroll', this.scrollHandler);
		}
	};

	ReactiveList.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
		var _this2 = this;

		var totalPages = Math.ceil(this.props.total / this.props.size) || 0;
		(0, _helper.checkSomePropChange)(this.props, prevProps, (0, _utils.getValidPropsKeys)(this.props), function () {
			_this2.props.updateComponentProps(_this2.props.componentId, _this2.props);
		});
		if (this.props.onData) {
			(0, _helper.checkSomePropChange)(this.props, prevProps, ['hits', 'streamHits', 'promotedResults', 'total', 'size', 'time', 'hidden'], function () {
				_this2.props.onData(_this2.getData());
			});
		}
		if (!(0, _helper.isEqual)(this.props.sortOptions, prevProps.sortOptions) || this.props.sortBy !== prevProps.sortBy || this.props.size !== prevProps.size || !(0, _helper.isEqual)(this.props.dataField, prevProps.dataField) || !(0, _helper.isEqual)(this.props.includeFields, prevProps.includeFields) || !(0, _helper.isEqual)(this.props.excludeFields, prevProps.excludeFields)) {
			var options = (0, _helper.getQueryOptions)(this.props);
			options.from = this.state.from;
			if (this.props.sortOptions) {
				var _ref4;

				options.sort = [(_ref4 = {}, _ref4[this.props.sortOptions[this.sortOptionIndex].dataField] = {
					order: this.props.sortOptions[this.sortOptionIndex].sortBy
				}, _ref4)];
			} else if (this.props.sortBy) {
				var _ref5;

				options.sort = [(_ref5 = {}, _ref5[this.props.dataField] = {
					order: this.props.sortBy
				}, _ref5)];
			}
			this.props.setQueryOptions(this.props.componentId, _extends({}, options, this.getAggsQuery()), true);
		}

		if (this.props.defaultQuery && !(0, _helper.isEqual)(this.props.defaultQuery(), this.defaultQuery)) {
			var _options = (0, _helper.getQueryOptions)(this.props);
			_options.from = 0;
			this.defaultQuery = this.props.defaultQuery();

			var query = this.defaultQuery.query;


			var queryOptions = (0, _helper.getOptionsFromQuery)(this.defaultQuery);
			if (queryOptions) {
				_options = _extends({}, _options, (0, _helper.getOptionsFromQuery)(this.defaultQuery));
				this.props.setQueryOptions(this.props.componentId, _options, !query);
			}

			this.props.updateQuery({
				componentId: this.internalComponent,
				query: query
			}, true);

			// reset page because of query change
			// eslint-disable-next-line
			this.setState({
				currentPage: 0,
				from: 0
			}, function () {
				_this2.updatePageURL(0);
			});
		}

		if (this.props.stream !== prevProps.stream) {
			this.props.setStreaming(this.props.componentId, this.props.stream);
		}

		if (!(0, _helper.isEqual)(prevProps.react, this.props.react)) {
			this.setReact(this.props);
		}
		if (this.shouldRenderPagination) {
			// called when page is changed
			if (this.props.isLoading && (this.props.hits || prevProps.hits)) {
				if (this.props.onPageChange) {
					this.props.onPageChange(this.state.currentPage + 1, totalPages);
				} else if (this.props.scrollOnChange && this.props.pagination) {
					this.scrollToTop();
				}
			}

			if (this.props.currentPage !== prevProps.currentPage && this.props.currentPage > 0 && this.props.currentPage <= totalPages) {
				this.setPage(this.props.currentPage - 1);
			}
		}

		if (this.showInfiniteScroll) {
			if (this.props.hits && prevProps.hits) {
				if (
				// new items are loaded (from: 0)
				this.props.hits.length < prevProps.hits.length
				// new items are loaded and 'from' hasn't changed
				|| this.props.hits.length === prevProps.hits.length && this.props.hits !== prevProps.hits) {
					// query has changed
					if (this.props.scrollOnChange) {
						this.scrollToTop();
					}
					// eslint-disable-next-line
					this.setState({
						from: 0
					});
				}
			}
		}

		if (prevProps.queryLog && this.props.queryLog && prevProps.queryLog !== this.props.queryLog) {
			// usecase:
			// - query has changed from non-null prev query

			if (this.props.queryLog.from !== this.state.from) {
				// query's 'from' key doesn't match the state's 'from' key,
				// i.e. this query change was not triggered by the page change (loadMore)
				// eslint-disable-next-line
				this.setState({
					currentPage: 0
				}, function () {
					_this2.updatePageURL(0);
				});

				if (this.props.onPageChange) {
					this.props.onPageChange(1, totalPages);
				}
			} else if (this.initialFrom && this.initialFrom === this.props.queryLog.from) {
				// [non-zero] initialFrom matches the current query's from
				// but the query has changed

				// we need to update the query options in this case
				// because the initial load had set the query 'from' in the store
				// which is not valid anymore because the query has changed
				var _options2 = (0, _helper.getQueryOptions)(this.props);
				_options2.from = 0;
				this.initialFrom = 0;

				if (this.props.sortOptions) {
					var _ref6;

					_options2.sort = [(_ref6 = {}, _ref6[this.props.sortOptions[this.sortOptionIndex].dataField] = {
						order: this.props.sortOptions[this.sortOptionIndex].sortBy
					}, _ref6)];
				} else if (this.props.sortBy) {
					var _ref7;

					_options2.sort = [(_ref7 = {}, _ref7[this.props.dataField] = {
						order: this.props.sortBy
					}, _ref7)];
				}

				this.props.setQueryOptions(this.props.componentId, _options2, true);
			}
		}

		// handle window url history change (on native back and forth interactions)
		if (this.state.currentPage !== this.props.defaultPage && this.props.defaultPage !== prevProps.defaultPage) {
			this.setPage(this.props.defaultPage >= 0 ? this.props.defaultPage : 0);
		}
	};

	ReactiveList.prototype.componentWillUnmount = function componentWillUnmount() {
		this.props.removeComponent(this.props.componentId);
		this.props.removeComponent(this.internalComponent);

		if (this.domNode) {
			this.domNode.removeEventListener('scroll', this.scrollHandler);
		}
	};

	// Calculate results


	ReactiveList.prototype.render = function render() {
		var _props = this.props,
		    renderItem = _props.renderItem,
		    size = _props.size,
		    error = _props.error,
		    renderPagination = _props.renderPagination;
		var currentPage = this.state.currentPage;

		var _getAllData = this.getAllData(),
		    filteredResults = _getAllData.filteredResults;

		var paginationProps = {
			pages: this.props.pages,
			totalPages: Math.ceil(this.props.total / size),
			currentPage: this.state.currentPage,
			setPage: this.setPage,
			showEndPage: this.props.showEndPage,
			innerClass: this.props.innerClass,
			fragmentName: this.props.componentId
		};
		var paginationElement = renderPagination ? renderPagination(paginationProps) : _react2.default.createElement(_Pagination2.default, paginationProps);

		var base = currentPage * size;
		return _react2.default.createElement(
			'div',
			{ style: this.props.style, className: this.props.className },
			this.props.isLoading && this.shouldRenderPagination && this.props.loader,
			this.renderError(),
			_react2.default.createElement(
				_Flex2.default,
				{
					labelPosition: this.props.sortOptions ? 'right' : 'left',
					className: (0, _helper.getClassName)(this.props.innerClass, 'resultsInfo')
				},
				this.props.sortOptions ? this.renderSortOptions() : null,
				this.props.showResultStats ? this.renderResultStats() : null
			),
			!this.props.isLoading && !error && filteredResults.length === 0 ? this.renderNoResults() : null,
			this.shouldRenderPagination && ['top', 'both'].indexOf(this.props.paginationAt) !== -1 ? paginationElement : null,
			_react2.default.createElement(_Results2.default, {
				base: base,
				hasCustomRender: this.hasCustomRenderer,
				getComponent: this.getComponent,
				listClass: this.props.listClass,
				innerClass: this.props.innerClass,
				renderItem: renderItem,
				triggerClickAnalytics: this.triggerClickAnalytics,
				filteredResults: filteredResults
			}),
			this.props.showLoader && this.props.isLoading && this.showInfiniteScroll ? this.props.loader || _react2.default.createElement(
				'div',
				{
					style: {
						textAlign: 'center',
						margin: '20px 0',
						color: '#666'
					}
				},
				'Loading...'
			) // prettier-ignore
			: null,
			this.shouldRenderPagination && ['bottom', 'both'].indexOf(this.props.paginationAt) !== -1 ? paginationElement : null,
			_react2.default.createElement(_PoweredBy2.default, {
				show: !!(this.props.config.url.endsWith('appbase.io') && filteredResults.length),
				innerClass: this.props.innerClass
			})
		);
	};

	_createClass(ReactiveList, [{
		key: 'stats',
		get: function get() {
			var currentPage = this.state.currentPage;

			var _getAllData2 = this.getAllData(),
			    filteredResults = _getAllData2.filteredResults;

			return _extends({}, (0, _helper.getResultStats)(this.props), {
				currentPage: currentPage,
				displayedResults: filteredResults.length
			});
		}
	}, {
		key: 'showInfiniteScroll',
		get: function get() {
			// Pagination has higher priority then infinite scroll
			var infiniteScroll = this.props.infiniteScroll;

			return infiniteScroll && !this.shouldRenderPagination;
		}
	}, {
		key: 'hasCustomRenderer',
		get: function get() {
			return (0, _utils.hasCustomRenderer)(this.props);
		}

		// only used for SSR

	}]);

	return ReactiveList;
}(_react.Component);

ReactiveList.ResultCardsWrapper = function (_ref8) {
	var children = _ref8.children,
	    rest = _objectWithoutProperties(_ref8, ['children']);

	return _react2.default.createElement(
		'div',
		_extends({ className: _Card.container }, rest),
		children
	);
};

ReactiveList.ResultListWrapper = function (_ref9) {
	var children = _ref9.children,
	    rest = _objectWithoutProperties(_ref9, ['children']);

	return _react2.default.createElement(
		'div',
		_extends({ className: _ListItem.container }, rest),
		children
	);
};

ReactiveList.generateQueryOptions = function (props) {
	// simulate default (includeFields and excludeFields) props to generate consistent query
	var options = (0, _helper.getQueryOptions)(_extends({ includeFields: ['*'], excludeFields: [] }, props));
	options.from = props.currentPage ? (props.currentPage - 1) * (props.size || 10) : 0;
	options.size = props.size || 10;

	if (props.sortOptions) {
		var _ref10;

		options.sort = [(_ref10 = {}, _ref10[props.sortOptions[0].dataField] = {
			order: props.sortOptions[0].sortBy
		}, _ref10)];
	} else if (props.sortBy) {
		var _ref11;

		options.sort = [(_ref11 = {}, _ref11[props.dataField] = {
			order: props.sortBy
		}, _ref11)];
	}

	return options;
};

var _initialiseProps = function _initialiseProps() {
	var _this3 = this;

	this.getAggsQuery = function () {
		var _props2 = _this3.props,
		    size = _props2.size,
		    aggregationField = _props2.aggregationField,
		    afterKey = _props2.afterKey;

		var queryOptions = { size: size };
		if (aggregationField) {
			queryOptions.aggs = (0, _helper.getCompositeAggsQuery)({}, _this3.props, afterKey ? { after: afterKey } : null, true).aggs;
		}
		return queryOptions;
	};

	this.getAllData = function () {
		var _props3 = _this3.props,
		    size = _props3.size,
		    promotedResults = _props3.promotedResults,
		    aggregationData = _props3.aggregationData;
		var currentPage = _this3.state.currentPage;

		var results = (0, _helper.parseHits)(_this3.props.hits) || [];
		var streamResults = (0, _helper.parseHits)(_this3.props.streamHits) || [];
		var filteredResults = results;
		var base = currentPage * size;
		if (streamResults.length) {
			var ids = streamResults.map(function (item) {
				return item._id;
			});
			filteredResults = filteredResults.filter(function (item) {
				return !ids.includes(item._id);
			});
		}

		if (promotedResults.length) {
			var _ids = promotedResults.map(function (item) {
				return item._id;
			}).filter(Boolean);
			if (_ids) {
				filteredResults = filteredResults.filter(function (item) {
					return !_ids.includes(item._id);
				});
			}

			filteredResults = [].concat(streamResults, promotedResults, filteredResults);
		}
		return {
			results: results,
			streamResults: streamResults,
			filteredResults: filteredResults,
			promotedResults: promotedResults,
			aggregationData: aggregationData || [],
			loadMore: _this3.loadMore,
			base: base,
			triggerClickAnalytics: _this3.triggerClickAnalytics
		};
	};

	this.setReact = function (props) {
		var react = props.react;

		if (react) {
			var newReact = (0, _helper.pushToAndClause)(react, _this3.internalComponent);
			props.watchComponent(props.componentId, newReact);
		} else {
			props.watchComponent(props.componentId, {
				and: _this3.internalComponent
			});
		}
	};

	this.scrollToTop = function () {
		if (_this3.domNode === window) {
			document.documentElement.scrollTop = 0;
			document.body.scrollTop = 0;
		} else {
			_this3.domNode.scrollTop = 0;
		}
	};

	this.scrollHandler = function () {
		var renderLoader = window.innerHeight + window.pageYOffset + 300 >= document.body.offsetHeight;
		if (_this3.props.scrollTarget) {
			renderLoader = _this3.domNode.clientHeight + _this3.domNode.scrollTop + 300 >= _this3.domNode.scrollHeight;
		}
		if (!_this3.props.isLoading && renderLoader) {
			_this3.loadMore();
		}
	};

	this.loadMore = function () {
		if (_this3.props.aggregationField && !_this3.props.afterKey) return;
		if (_this3.props.hits && _this3.props.total !== _this3.props.hits.length) {
			var value = _this3.state.from + _this3.props.size;
			var options = _extends({}, (0, _helper.getQueryOptions)(_this3.props), _this3.getAggsQuery());
			_this3.setState({
				from: value
			});
			_this3.props.loadMore(_this3.props.componentId, _extends({}, options, {
				from: value
			}), true, !!_this3.props.aggregationField);
		}
	};

	this.setPage = function (page) {
		// onPageClick will be called everytime a pagination button is clicked
		if (page !== _this3.state.currentPage) {
			var onPageClick = _this3.props.onPageClick;

			if (onPageClick) {
				onPageClick(page + 1);
			}
			var value = _this3.props.size * page;
			var options = (0, _helper.getQueryOptions)(_this3.props);
			options.from = _this3.state.from;
			_this3.setState({
				from: value,
				currentPage: page
			}, function () {
				_this3.props.loadMore(_this3.props.componentId, _extends({}, options, {
					from: value
				}), false);

				_this3.updatePageURL(page);
			});
		}
	};

	this.renderResultStats = function () {
		var _props4 = _this3.props,
		    hits = _props4.hits,
		    promotedResults = _props4.promotedResults,
		    total = _props4.total;


		var shouldStatsVisible = hits && promotedResults && (hits.length || promotedResults.length);
		if (_this3.props.renderResultStats && shouldStatsVisible) {
			return _this3.props.renderResultStats(_this3.stats);
		} else if (total) {
			return _react2.default.createElement(
				'p',
				{
					className: _results.resultStats + ' ' + (0, _helper.getClassName)(_this3.props.innerClass, 'resultStats')
				},
				_this3.props.total,
				' results found in ',
				_this3.props.time,
				'ms'
			);
		}
		return null;
	};

	this.renderNoResults = function () {
		return _react2.default.createElement(
			'div',
			{ className: (0, _helper.getClassName)(_this3.props.innerClass, 'noResults') || null },
			_this3.props.renderNoResults()
		);
	};

	this.handleSortChange = function (e) {
		var _ref12;

		var index = e.target.value;
		var options = (0, _helper.getQueryOptions)(_this3.props);
		// This fixes issue #371 (where sorting a multi-result page with infinite loader breaks)
		options.from = 0;

		options.sort = [(_ref12 = {}, _ref12[_this3.props.sortOptions[index].dataField] = {
			order: _this3.props.sortOptions[index].sortBy
		}, _ref12)];
		_this3.props.setQueryOptions(_this3.props.componentId, options, true);
		_this3.sortOptionIndex = index;

		_this3.setState({
			currentPage: 0,
			from: 0
		}, function () {
			_this3.updatePageURL(0);
		});
	};

	this.updatePageURL = function (page) {
		if (_this3.props.URLParams) {
			_this3.props.setPageURL(_this3.props.componentId, page + 1, _this3.props.componentId, false, true);
		}
	};

	this.triggerClickAnalytics = function (searchPosition) {
		_this3.props.triggerAnalytics(searchPosition);
	};

	this.renderSortOptions = function () {
		return _react2.default.createElement(
			'select',
			{
				className: _results.sortOptions + ' ' + (0, _helper.getClassName)(_this3.props.innerClass, 'sortOptions'),
				name: 'sort-options',
				onChange: _this3.handleSortChange,
				defaultValue: _this3.sortOptionIndex
			},
			_this3.props.sortOptions.map(function (sort, index) {
				return _react2.default.createElement(
					'option',
					{ key: sort.label, value: index },
					sort.label
				);
			})
		);
	};

	this.renderError = function () {
		var _props5 = _this3.props,
		    error = _props5.error,
		    isLoading = _props5.isLoading,
		    renderError = _props5.renderError;

		if (renderError && error && !isLoading) {
			return (0, _utils.isFunction)(renderError) ? renderError(error) : renderError;
		}
		return null;
	};

	this.withClickIds = function (results) {
		var _getAllData3 = _this3.getAllData(),
		    base = _getAllData3.base;

		return results.map(function (result, index) {
			return _extends({}, result, {
				_click_id: base + index
			});
		});
	};

	this.getData = function () {
		var _getAllData4 = _this3.getAllData(),
		    results = _getAllData4.results,
		    streamResults = _getAllData4.streamResults,
		    filteredResults = _getAllData4.filteredResults,
		    promotedResults = _getAllData4.promotedResults,
		    aggregationData = _getAllData4.aggregationData;

		return {
			data: _this3.withClickIds(filteredResults),
			aggregationData: _this3.withClickIds(aggregationData || []),
			streamData: _this3.withClickIds(streamResults),
			promotedData: _this3.withClickIds(promotedResults),
			rawData: _this3.withClickIds(results),
			resultStats: _this3.stats
		};
	};

	this.getComponent = function () {
		var _props6 = _this3.props,
		    error = _props6.error,
		    isLoading = _props6.isLoading;

		var data = _extends({
			error: error,
			loading: isLoading,
			loadMore: _this3.loadMore,
			triggerAnalytics: _this3.triggerClickAnalytics
		}, _this3.getData());
		return (0, _utils.getComponent)(data, _this3.props);
	};
};

ReactiveList.propTypes = {
	addComponent: _types2.default.funcRequired,
	loadMore: _types2.default.funcRequired,
	removeComponent: _types2.default.funcRequired,
	setQueryListener: _types2.default.funcRequired,
	onQueryChange: _types2.default.func,
	onError: _types2.default.func,
	setPageURL: _types2.default.func,
	setQueryOptions: _types2.default.funcRequired,
	setComponentProps: _types2.default.funcRequired,
	updateComponentProps: _types2.default.funcRequired,
	setStreaming: _types2.default.func,
	searchState: _types2.default.dateObject,
	updateQuery: _types2.default.funcRequired,
	watchComponent: _types2.default.funcRequired,
	currentPage: _types2.default.number,
	hits: _types2.default.hits,
	isLoading: _types2.default.bool,
	includeFields: _types2.default.includeFields,
	streamHits: _types2.default.hits,
	promotedResults: _types2.default.hits,
	time: _types2.default.number,
	total: _types2.default.number,
	hidden: _types2.default.number,
	config: _types2.default.props,
	analytics: _types2.default.props,
	queryLog: _types2.default.props,
	error: _types2.default.title,
	headers: _types2.default.headers,
	// component props
	className: _types2.default.string,
	componentId: _types2.default.stringRequired,
	children: _types2.default.func,
	dataField: _types2.default.stringRequired,
	aggregationField: _types2.default.string,
	aggregationData: _types2.default.aggregationData,
	defaultPage: _types2.default.number,
	defaultQuery: _types2.default.func,
	excludeFields: _types2.default.excludeFields,
	innerClass: _types2.default.style,
	infiniteScroll: _types2.default.bool,
	listClass: _types2.default.string,
	loader: _types2.default.title,
	render: _types2.default.func,
	renderItem: _types2.default.func,
	renderError: _types2.default.title,
	renderPagination: _types2.default.func,
	onData: _types2.default.func,
	renderNoResults: _types2.default.title,
	onPageChange: _types2.default.func,
	onPageClick: _types2.default.func,
	pages: _types2.default.number,
	pagination: _types2.default.bool,
	paginationAt: _types2.default.paginationAt,
	showEndPage: _types2.default.bool,
	react: _types2.default.react,
	renderResultStats: _types2.default.func,
	scrollOnChange: _types2.default.bool,
	scrollTarget: _types2.default.string,
	showLoader: _types2.default.bool,
	showResultStats: _types2.default.bool,
	size: _types2.default.number,
	sortBy: _types2.default.sortBy,
	sortOptions: _types2.default.sortOptions,
	stream: _types2.default.bool,
	style: _types2.default.style,
	triggerAnalytics: _types2.default.funcRequired,
	URLParams: _types2.default.bool,
	defaultSortOption: _types2.default.string,
	afterKey: _types2.default.props
};

ReactiveList.defaultProps = {
	className: null,
	currentPage: 0,
	listClass: '',
	pages: 5,
	infiniteScroll: true,
	pagination: false,
	paginationAt: 'bottom',
	showEndPage: false,
	includeFields: ['*'],
	excludeFields: [],
	showResultStats: true,
	size: 10,
	style: {},
	URLParams: false,
	showLoader: true,
	renderNoResults: function renderNoResults() {
		return 'No Results found.';
	},
	scrollOnChange: true,
	defaultSortOption: null
};

var mapStateToProps = function mapStateToProps(state, props) {
	return {
		defaultPage: state.selectedValues[props.componentId] && state.selectedValues[props.componentId].value - 1 || -1,
		hits: state.hits[props.componentId] && state.hits[props.componentId].hits,
		aggregationData: state.compositeAggregations[props.componentId],
		isLoading: state.isLoading[props.componentId] || false,
		streamHits: state.streamHits[props.componentId],
		time: state.hits[props.componentId] && state.hits[props.componentId].time || 0,
		total: state.hits[props.componentId] && state.hits[props.componentId].total,
		hidden: state.hits[props.componentId] && state.hits[props.componentId].hidden,
		config: state.config,
		queryLog: state.queryLog[props.componentId],
		error: state.error[props.componentId],
		promotedResults: state.promotedResults[props.componentId] || [],
		afterKey: state.aggregations[props.componentId] && state.aggregations[props.componentId][props.aggregationField] && state.aggregations[props.componentId][props.aggregationField].after_key
	};
};

var mapDispatchtoProps = function mapDispatchtoProps(dispatch) {
	return {
		addComponent: function addComponent(component) {
			return dispatch((0, _actions.addComponent)(component));
		},
		setComponentProps: function setComponentProps(component, options) {
			return dispatch((0, _actions.setComponentProps)(component, options));
		},
		updateComponentProps: function updateComponentProps(component, options) {
			return dispatch((0, _actions.updateComponentProps)(component, options));
		},
		loadMore: function loadMore(component, options, append, appendAggs) {
			return dispatch((0, _actions.loadMore)(component, options, append, appendAggs));
		},
		removeComponent: function removeComponent(component) {
			return dispatch((0, _actions.removeComponent)(component));
		},
		setPageURL: function setPageURL(component, value, label, showFilter, URLParams) {
			return dispatch((0, _actions.setValue)(component, value, label, showFilter, URLParams));
		},
		setQueryOptions: function setQueryOptions(component, props, execute) {
			return dispatch((0, _actions.setQueryOptions)(component, props, execute));
		},
		setQueryListener: function setQueryListener(component, onQueryChange, beforeQueryChange) {
			return dispatch((0, _actions.setQueryListener)(component, onQueryChange, beforeQueryChange));
		},
		setStreaming: function setStreaming(component, stream) {
			return dispatch((0, _actions.setStreaming)(component, stream));
		},
		updateQuery: function updateQuery(updateQueryObject, execute) {
			return dispatch((0, _actions.updateQuery)(updateQueryObject, execute));
		},
		watchComponent: function watchComponent(component, react) {
			return dispatch((0, _actions.watchComponent)(component, react));
		},
		triggerAnalytics: function triggerAnalytics(searchPosition) {
			return dispatch((0, _actions.recordResultClick)(searchPosition));
		}
	};
};

var ConnectedComponent = (0, _utils.connect)(mapStateToProps, mapDispatchtoProps)(function (props) {
	return _react2.default.createElement(ReactiveList, _extends({ ref: props.myForwardedRef }, props));
});

// eslint-disable-next-line
var ForwardRefComponent = _react2.default.forwardRef(function (props, ref) {
	return _react2.default.createElement(ConnectedComponent, _extends({}, props, { myForwardedRef: ref }));
});
(0, _hoistNonReactStatics2.default)(ForwardRefComponent, ReactiveList);

ForwardRefComponent.name = 'ReactiveList';
exports.default = ForwardRefComponent;